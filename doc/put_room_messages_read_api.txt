# PUT /rooms/{room_id}/messages/read

## 基本情報
- エンドポイント: `https://api.chatwork.com/v2/rooms/{room_id}/messages/read`
- メソッド: PUT
- 説明: チャットのメッセージを既読にします

## URLパラメータ
| パラメータ | 型 | 必須 | 説明 |
|------------|----|----|------|
| room_id | 整数 | 必須 | チャットルームのID |

## リクエストヘッダ
```
X-ChatWorkToken: <APIトークン>
```

## リクエストボディ
| パラメータ | 型 | 必須 | 説明 |
|------------|----|----|------|
| message_id | 文字列 | 任意 | 既読にするメッセージのID（指定しない場合は全て既読） |

## レスポンス
### 成功時のステータスコード
- 200: 成功

### レスポンスボディ
```typescript
interface ReadResponse {
  unread_num: number;      // 未読メッセージ数
  mention_num: number;     // メンション数
}
```

## エラーレスポンス
| ステータスコード | 説明 |
|-----------------|------|
| 401 | 認証エラー（APIトークンが無効） |
| 403 | アクセス権限エラー |
| 404 | チャットルームが見つからない |
| 429 | リクエスト制限超過（5分あたり300リクエスト） |

## Node.jsでの実装例
```typescript
async function markMessagesAsRead(apiToken: string, roomId: number, messageId?: string) {
  try {
    const body = messageId ? { message_id: messageId } : {};
    const response = await fetch(
      `https://api.chatwork.com/v2/rooms/${roomId}/messages/read`,
      {
        method: 'PUT',
        headers: {
          'X-ChatWorkToken': apiToken,
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: new URLSearchParams(body)
      }
    );

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    return result;
  } catch (error) {
    console.error('メッセージ既読エラー:', error);
    throw error;
  }
}
```

## 使用上の注意点
1. APIトークンは必ず秘密に保管し、環境変数などで管理してください
2. リクエスト制限（5分あたり300リクエスト）に注意してください
3. エラーハンドリングを適切に実装してください
4. message_idを指定しない場合は、そのチャットの全メッセージが既読になります
5. Content-Typeは必ず`application/x-www-form-urlencoded`を指定してください 