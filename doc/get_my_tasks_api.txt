# GET /my/tasks

## 基本情報
- エンドポイント: `https://api.chatwork.com/v2/my/tasks`
- メソッド: GET
- 説明: 自分のタスク一覧を取得します

## リクエストヘッダ
```
X-ChatWorkToken: <APIトークン>
```

## クエリパラメータ
| パラメータ | 型 | 必須 | 説明 |
|------------|----|----|------|
| assigned_by_account_id | 整数 | 任意 | タスクの依頼者のアカウントID |
| status | 文字列 | 任意 | タスクのステータス（`open` または `done`） |

## レスポンス
### 成功時のステータスコード
- 200: 成功

### レスポンスボディ
タスクオブジェクトの配列が返されます：

```typescript
interface Task {
  task_id: number;          // タスクID
  room: {
    room_id: number;        // チャットルームID
    name: string;           // チャットルーム名
    icon_path: string;      // チャットルームのアイコンのURL
  };
  assigned_by_account: {
    account_id: number;     // タスク作成者のアカウントID
    name: string;           // タスク作成者の名前
    avatar_image_url: string; // タスク作成者のアバター画像URL
  };
  message_id: string;       // タスクが含まれるメッセージID
  body: string;            // タスクの本文
  limit_time: number;      // タスクの期限（UNIXタイムスタンプ）
  status: "open" | "done"; // タスクのステータス
  limit_type: string;      // 期限の種類（"date" または "time"）
}
```

## エラーレスポンス
| ステータスコード | 説明 |
|-----------------|------|
| 401 | 認証エラー（APIトークンが無効） |
| 403 | アクセス権限エラー |
| 429 | リクエスト制限超過（5分あたり300リクエスト） |

## Node.jsでの実装例
```typescript
async function getMyTasks(apiToken: string) {
  try {
    const response = await fetch('https://api.chatwork.com/v2/my/tasks', {
      method: 'GET',
      headers: {
        'X-ChatWorkToken': apiToken
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const tasks = await response.json();
    return tasks;
  } catch (error) {
    console.error('タスク取得エラー:', error);
    throw error;
  }
}
```

## 使用上の注意点
1. APIトークンは必ず秘密に保管し、環境変数などで管理してください
2. リクエスト制限（5分あたり300リクエスト）に注意してください
3. エラーハンドリングを適切に実装してください
4. レスポンスのタイムスタンプはUNIX時間形式です 